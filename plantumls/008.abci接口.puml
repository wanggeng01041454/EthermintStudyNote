@startuml 1.abci接口类图
    title
        abci接口的类图
    end title

    namespace tendermint {

        namespace libs.service {
            interface Service {
                +Start() error
                +Stop() error
            }
            note left
                libs/service/service.go
            end note 

            struct BaseService {
                impl Service
            }
        }

        namespace abci {
            namespace abcicli {
                interface Client {

                }
                note left
                    abci/client/client.go
                end note 

                struct localClient #HotPink {
                    Application types.Application
                }
                Client <|-- localClient

                struct grpcClient {

                }
                Client <|-- grpcClient

                struct socketClient {

                }
                Client <|-- socketClient
                
            }

            namespace types {
                interface Application #HotPink {

                }
                note left
                    abci/types/application.go
                end note
            }

            abcicli.localClient o- types.Application
        }

        namespace proxy {
            
            interface AppConnConsensus {
                <color:DarkGreen>共识子接口
                ====
                InitChainSync
                ----
                BeginBlockSync
                ....
                DeliverTxAsync
                ....
                EndBlockSync
                ....
                CommitSync
            }
            struct appConnConsensus {
                appConn abcicli.Client
            }
            AppConnConsensus <|-- appConnConsensus


            interface AppConnMempool {
                <color:DarkGreen>内存池子接口
                ====
                CheckTxAsync
                ....
                CheckTxSync
                ----
                FlushAsync
                ....
                FlushSync
            }
            struct appConnMempool {
                appConn abcicli.Client
            }
            AppConnMempool <|-- appConnMempool

            interface AppConnQuery {
                <color:DarkGreen>查询子接口
                ====
                QuerySync
                ----
                InfoSync
                ----
                EchoSync
            }
            struct appConnQuery {
                appConn abcicli.Client
            }
            AppConnQuery <|-- appConnQuery

            interface AppConnSnapshot {
                <color:DarkGreen>快照子接口
                ====
                ListSnapshotsSync
                ....
                OfferSnapshotSync
                ----
                LoadSnapshotChunkSync
                ....
                ApplySnapshotChunkSync
            }
            struct appConnSnapshot {
                appConn abcicli.Client
            }
            AppConnSnapshot <|-- appConnSnapshot

            interface ClientCreator {
                NewABCIClient() abcicli.Client
            }
            struct localClientCreator {
                //上层应用和Tendermint
                //<color:Red>在同一个进程中
                //使用该实现
            }
            struct remoteClientCreator {
                //上层应用和Tendermint
                //<color:Red>不在同一个进程中
                //使用该实现
            }
            ClientCreator <|-- localClientCreator
            ClientCreator <|-- remoteClientCreator


            interface AppConns {
                <color:DarkGreen>通过调用接口函数
                <color:DarkGreen>返回实现了 AppConnXXX 接口的对象
                ====
                Mempool() AppConnMempool
                ....
                Consensus() AppConnConsensus
                ....
                Query() AppConnQuery
                ....
                Snapshot() AppConnSnapshot	
            }
            struct multiAppConn <<通过该对象分发ABCI的子接口对象>> {
                <color:DarkGreen>//在 node.NewNode 函数中被创建
                ====
            }

            AppConns <|-- multiAppConn

            multiAppConn o-- AppConnConsensus
            multiAppConn o-- AppConnMempool
            multiAppConn o-- AppConnQuery
            multiAppConn o-- AppConnSnapshot

            multiAppConn o-- ClientCreator : 用于创建 Client 对象
        }

        namespace state {
            struct BlockExecutor {
                proxyApp proxy.AppConnConsensus
            }
        }
        namespace consensus {
            struct State #DeepSkyBlue {
                共识引擎 数据结构
                ====
                blockExec *sm.BlockExecutor
            }
        }
        consensus.State o-- state.BlockExecutor

        namespace mempool.v0 {
            struct CListMempool #DeepSkyBlue {
                内存池 数据结构
                ====
                proxyAppConn proxy.AppConnMempool
            }
        }

        namespace rpc.core {
            struct Environment #SkyBlue {
                rpc 环境的数据结构
                它同时包含了 查询子接口 和 内存池子接口
                ====
                ProxyAppQuery   proxy.AppConnQuery
                ....
                ProxyAppMempool proxy.AppConnMempool               
            }
        }

        namespace statesync {
            struct Reactor #DeepSkyBlue {
                状态同步引擎 数据结构
                ====
                conn proxy.AppConnSnapshot
                ....
                connQuery proxy.AppConnQuery
            }
        }

        'tendermint 内部
        libs.service.Service <|--- proxy.AppConns
        libs.service.BaseService <|--- proxy.multiAppConn

        proxy.appConnConsensus o---- abci.abcicli.Client
        proxy.appConnMempool o---- abci.abcicli.Client
        proxy.appConnQuery o---- abci.abcicli.Client
        proxy.appConnSnapshot o---- abci.abcicli.Client

        state.BlockExecutor o-[#LimeGreen]- proxy.AppConnConsensus
        mempool.v0.CListMempool o--[#Blue]-- proxy.AppConnMempool
        rpc.core.Environment o-[#Fuchsia]- proxy.AppConnQuery
        rpc.core.Environment o-[#Blue]- proxy.AppConnMempool
        statesync.Reactor o-[#Gold]- proxy.AppConnSnapshot
        statesync.Reactor o-[#Fuchsia]- proxy.AppConnQuery
    }


    namespace cosmossdk {
        namespace baseapp {
            struct BaseApp {

            }
        }
    }

    namespace ethermint {
        namespace app {
            struct EthermintApp {
                
            }
        }
    }

    tendermint.abci.types.Application <|---- cosmossdk.baseapp.BaseApp
    cosmossdk.baseapp.BaseApp <|-- ethermint.app.EthermintApp

@enduml

@startuml 2.abci接口初始化流程
    title 
        abci接口初始化流程
    end title

    box ethermint
        participant "server/start.go::StartCmd" as StartCmd
        participant "server/start.go::startInProcess" as startInProcess
    end box 

    box tendermint
        participant "node/node.go::NewNode" as tmNewNode
        participant "node/node.go\n::createAndStartProxyAppConns" as createAndStartProxyAppConns
        participant "proxy/multi_app_conn.go\n::NewAppConns" as NewAppConns
        participant "proxy/multi_app_conn.go\n::multiAppConn.OnStart" as multiAppConnOnStart
    end box


    autonumber
    autoactivate on

    StartCmd -> startInProcess : \
    \n <color:red> 因为 with-tendermint 标记被设为 true，\
    \n <color:red> 所以会走到调用 startInProcess函数的分支

        note over startInProcess
            startInProcess 函数中：
            <code>
            app := appCreator(ctx.Logger, db, traceWriter, ctx.Viper)
            </code>
        end note 

        note over StartCmd
            appCreator 作为函数参数传入 StartCmd, 再传入了 startInProcess；
            appCreator 的创建一直可以追溯到 cmd/ethermintd/root.go 中，
            appCreator = appCreator.newApp 
            其中 appCreator.newApp 函数返回一个 app.EthermintApp 对象
        end note 

        startInProcess -> tmNewNode : 调用 node.NewNode 函数 \
        \n 参数 clientCreator = proxy.NewLocalClientCreator(app)

            tmNewNode -> createAndStartProxyAppConns : 调用 createAndStartProxyAppConns 函数 \
            \n 透传这个参数： clientCreator = clientCreator

                note over createAndStartProxyAppConns
                    proxy.NewLocalClientCreator(app) 函数的内容：
                    ----
                    <code>
                    func NewLocalClientCreator(app types.Application) ClientCreator {
                        return &localClientCreator{
                            mtx: new(cmtsync.Mutex),
                            app: app,
                        }
                    }
                    </code>
                end note

                createAndStartProxyAppConns -> NewAppConns : 调用 NewAppConns 函数 

                    NewAppConns -> multiAppConnOnStart : 通过调用 proxy.AppConns.Start 函数，\
                    \n 触发 proxy.AppConns.OnStart 函数的调用

                    note over multiAppConnOnStart
                        使用同一个 abcicli.Client 对象创建4类 AppConnXXX 对象
                    end note

                    return
                    ' NewAppConns -> multiAppConnOnStart return

                return : 返回 proxy.AppConns 接口，\
                \n 实际为 proxy.multiAppConn 对象

            return proxyApp
            ' tmNewNode -> createAndStartProxyAppConns return

            tmNewNode -> tmNewNode : 所得的 proxyApp 被存放在 \
            \n node.Node 的 proxyApp 字段中
            deactivate

        return : 返回 tendermint.Node 对象
        ' startInProcess -> tmNewNode return

    return
    ' StartCmd -> startInProcess return



@enduml



